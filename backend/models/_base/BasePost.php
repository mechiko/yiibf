<?php

/**
 * This is the model base class for the table "tbl_post".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Post".
 *
 * Columns in table "tbl_post" available as properties of the model,
 * followed by relations of table "tbl_post" available as properties of the model.
 *
 * @property integer $id
 * @property integer $blog_id
 * @property string $create_user_id
 * @property string $update_user_id
 * @property integer $create_date
 * @property integer $update_date
 * @property integer $publish_date
 * @property string $slug
 * @property string $lang
 * @property string $title
 * @property string $quote
 * @property string $content
 * @property string $link
 * @property integer $status
 * @property integer $comment_status
 * @property string $create_user_ip
 * @property integer $access_type
 * @property string $keywords
 * @property string $description
 * @property string $image
 * @property integer $category_id
 *
 * @property User $createUser
 * @property User $updateUser
 * @property Tag[] $tblTags
 */
abstract class BasePost extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'tbl_post';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Post|Posts', $n);
	}

	public static function representingColumn() {
		return 'slug';
	}

	public function rules() {
		return array(
			array('blog_id, create_user_id, update_user_id, create_date, update_date, publish_date, slug, title, content, create_user_ip', 'required'),
			array('blog_id, create_date, update_date, publish_date, status, comment_status, access_type, category_id', 'numerical', 'integerOnly'=>true),
			array('create_user_id, update_user_id', 'length', 'max'=>10),
			array('slug', 'length', 'max'=>150),
			array('lang', 'length', 'max'=>2),
			array('title, quote, link, keywords, description', 'length', 'max'=>250),
			array('create_user_ip', 'length', 'max'=>20),
			array('image', 'length', 'max'=>300),
			array('lang, quote, link, status, comment_status, access_type, keywords, description, image, category_id', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, blog_id, create_user_id, update_user_id, create_date, update_date, publish_date, slug, lang, title, quote, content, link, status, comment_status, create_user_ip, access_type, keywords, description, image, category_id', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'createUser' => array(self::BELONGS_TO, 'User', 'create_user_id'),
			'updateUser' => array(self::BELONGS_TO, 'User', 'update_user_id'),
			'tblTags' => array(self::MANY_MANY, 'Tag', 'tbl_post_to_tag(post_id, tag_id)'),
		);
	}

	public function pivotModels() {
		return array(
			'tblTags' => 'PostToTag',
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'blog_id' => Yii::t('app', 'Blog'),
			'create_user_id' => null,
			'update_user_id' => null,
			'create_date' => Yii::t('app', 'Create Date'),
			'update_date' => Yii::t('app', 'Update Date'),
			'publish_date' => Yii::t('app', 'Publish Date'),
			'slug' => Yii::t('app', 'Slug'),
			'lang' => Yii::t('app', 'Lang'),
			'title' => Yii::t('app', 'Title'),
			'quote' => Yii::t('app', 'Quote'),
			'content' => Yii::t('app', 'Content'),
			'link' => Yii::t('app', 'Link'),
			'status' => Yii::t('app', 'Status'),
			'comment_status' => Yii::t('app', 'Comment Status'),
			'create_user_ip' => Yii::t('app', 'Create User Ip'),
			'access_type' => Yii::t('app', 'Access Type'),
			'keywords' => Yii::t('app', 'Keywords'),
			'description' => Yii::t('app', 'Description'),
			'image' => Yii::t('app', 'Image'),
			'category_id' => Yii::t('app', 'Category'),
			'createUser' => null,
			'updateUser' => null,
			'tblTags' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('blog_id', $this->blog_id);
		$criteria->compare('create_user_id', $this->create_user_id);
		$criteria->compare('update_user_id', $this->update_user_id);
		$criteria->compare('create_date', $this->create_date);
		$criteria->compare('update_date', $this->update_date);
		$criteria->compare('publish_date', $this->publish_date);
		$criteria->compare('slug', $this->slug, true);
		$criteria->compare('lang', $this->lang, true);
		$criteria->compare('title', $this->title, true);
		$criteria->compare('quote', $this->quote, true);
		$criteria->compare('content', $this->content, true);
		$criteria->compare('link', $this->link, true);
		$criteria->compare('status', $this->status);
		$criteria->compare('comment_status', $this->comment_status);
		$criteria->compare('create_user_ip', $this->create_user_ip, true);
		$criteria->compare('access_type', $this->access_type);
		$criteria->compare('keywords', $this->keywords, true);
		$criteria->compare('description', $this->description, true);
		$criteria->compare('image', $this->image, true);
		$criteria->compare('category_id', $this->category_id);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}