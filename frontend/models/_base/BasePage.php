<?php

/**
 * This is the model base class for the table "tbl_page".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Page".
 *
 * Columns in table "tbl_page" available as properties of the model,
 * followed by relations of table "tbl_page" available as properties of the model.
 *
 * @property integer $id
 * @property integer $category_id
 * @property string $lang
 * @property integer $parent_id
 * @property string $creation_date
 * @property string $change_date
 * @property string $user_id
 * @property string $change_user_id
 * @property string $title_short
 * @property string $title
 * @property string $slug
 * @property string $body
 * @property string $keywords
 * @property string $description
 * @property integer $status
 * @property integer $is_protected
 * @property integer $order
 *
 * @property Category $category
 * @property User $changeUser
 * @property User $user
 */
abstract class BasePage extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'tbl_page';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Page|Pages', $n);
	}

	public static function representingColumn() {
		return 'creation_date';
	}

	public function rules() {
		return array(
			array('creation_date, change_date, title_short, title, slug, body, keywords, description, status', 'required'),
			array('category_id, parent_id, status, is_protected, order', 'numerical', 'integerOnly'=>true),
			array('lang', 'length', 'max'=>2),
			array('user_id, change_user_id', 'length', 'max'=>10),
			array('title_short, slug', 'length', 'max'=>150),
			array('title, keywords, description', 'length', 'max'=>250),
			array('category_id, lang, parent_id, user_id, change_user_id, is_protected, order', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, category_id, lang, parent_id, creation_date, change_date, user_id, change_user_id, title_short, title, slug, body, keywords, description, status, is_protected, order', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'category' => array(self::BELONGS_TO, 'Category', 'category_id'),
			'changeUser' => array(self::BELONGS_TO, 'User', 'change_user_id'),
			'user' => array(self::BELONGS_TO, 'User', 'user_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'category_id' => null,
			'lang' => Yii::t('app', 'Lang'),
			'parent_id' => Yii::t('app', 'Parent'),
			'creation_date' => Yii::t('app', 'Creation Date'),
			'change_date' => Yii::t('app', 'Change Date'),
			'user_id' => null,
			'change_user_id' => null,
			'title_short' => Yii::t('app', 'Title Short'),
			'title' => Yii::t('app', 'Title'),
			'slug' => Yii::t('app', 'Slug'),
			'body' => Yii::t('app', 'Body'),
			'keywords' => Yii::t('app', 'Keywords'),
			'description' => Yii::t('app', 'Description'),
			'status' => Yii::t('app', 'Status'),
			'is_protected' => Yii::t('app', 'Is Protected'),
			'order' => Yii::t('app', 'Order'),
			'category' => null,
			'changeUser' => null,
			'user' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('category_id', $this->category_id);
		$criteria->compare('lang', $this->lang, true);
		$criteria->compare('parent_id', $this->parent_id);
		$criteria->compare('creation_date', $this->creation_date, true);
		$criteria->compare('change_date', $this->change_date, true);
		$criteria->compare('user_id', $this->user_id);
		$criteria->compare('change_user_id', $this->change_user_id);
		$criteria->compare('title_short', $this->title_short, true);
		$criteria->compare('title', $this->title, true);
		$criteria->compare('slug', $this->slug, true);
		$criteria->compare('body', $this->body, true);
		$criteria->compare('keywords', $this->keywords, true);
		$criteria->compare('description', $this->description, true);
		$criteria->compare('status', $this->status);
		$criteria->compare('is_protected', $this->is_protected);
		$criteria->compare('order', $this->order);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}