<?php

/**
 * This is the model base class for the table "user".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "User".
 *
 * Columns in table "user" available as properties of the model,
 * followed by relations of table "user" available as properties of the model.
 *
 * @property string $id
 * @property string $username
 * @property string $password
 * @property string $activationKey
 * @property integer $createtime
 * @property integer $lastvisit
 * @property integer $lastaction
 * @property integer $lastpasswordchange
 * @property integer $failedloginattempts
 * @property integer $superuser
 * @property integer $status
 * @property string $avatar
 * @property string $notifyType
 *
 * @property TblNews[] $tblNews
 * @property TblPage[] $tblPages
 * @property TblPage[] $tblPages1
 * @property TblPost[] $tblPosts
 * @property TblPost[] $tblPosts1
 */
abstract class BaseUser extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'user';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'User|Users', $n);
	}

	public static function representingColumn() {
		return 'username';
	}

	public function rules() {
		return array(
			array('username, password', 'required'),
			array('createtime, lastvisit, lastaction, lastpasswordchange, failedloginattempts, superuser, status', 'numerical', 'integerOnly'=>true),
			array('username, avatar', 'length', 'max'=>255),
			array('password', 'length', 'max'=>64),
			array('activationKey', 'length', 'max'=>128),
			array('notifyType', 'length', 'max'=>9),
			array('activationKey, createtime, lastvisit, lastaction, lastpasswordchange, failedloginattempts, superuser, status, avatar, notifyType', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, username, password, activationKey, createtime, lastvisit, lastaction, lastpasswordchange, failedloginattempts, superuser, status, avatar, notifyType', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'tblNews' => array(self::HAS_MANY, 'TblNews', 'user_id'),
			'tblPages' => array(self::HAS_MANY, 'TblPage', 'change_user_id'),
			'tblPages1' => array(self::HAS_MANY, 'TblPage', 'user_id'),
			'tblPosts' => array(self::HAS_MANY, 'TblPost', 'create_user_id'),
			'tblPosts1' => array(self::HAS_MANY, 'TblPost', 'update_user_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'username' => Yii::t('app', 'Username'),
			'password' => Yii::t('app', 'Password'),
			'activationKey' => Yii::t('app', 'Activation Key'),
			'createtime' => Yii::t('app', 'Createtime'),
			'lastvisit' => Yii::t('app', 'Lastvisit'),
			'lastaction' => Yii::t('app', 'Lastaction'),
			'lastpasswordchange' => Yii::t('app', 'Lastpasswordchange'),
			'failedloginattempts' => Yii::t('app', 'Failedloginattempts'),
			'superuser' => Yii::t('app', 'Superuser'),
			'status' => Yii::t('app', 'Status'),
			'avatar' => Yii::t('app', 'Avatar'),
			'notifyType' => Yii::t('app', 'Notify Type'),
			'tblNews' => null,
			'tblPages' => null,
			'tblPages1' => null,
			'tblPosts' => null,
			'tblPosts1' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id, true);
		$criteria->compare('username', $this->username, true);
		$criteria->compare('password', $this->password, true);
		$criteria->compare('activationKey', $this->activationKey, true);
		$criteria->compare('createtime', $this->createtime);
		$criteria->compare('lastvisit', $this->lastvisit);
		$criteria->compare('lastaction', $this->lastaction);
		$criteria->compare('lastpasswordchange', $this->lastpasswordchange);
		$criteria->compare('failedloginattempts', $this->failedloginattempts);
		$criteria->compare('superuser', $this->superuser);
		$criteria->compare('status', $this->status);
		$criteria->compare('avatar', $this->avatar, true);
		$criteria->compare('notifyType', $this->notifyType, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}